rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes_string(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
library("HandyStuff")
?rxnNorm
require("ChemoSpec")#
require("ggplot2")#
require("gridExtra")
res = c(rnorm(10, 5, 1.5), rnorm(10, 8, 2),#
rnorm(10, 14, 2.0), rnorm(10, 10, 1.5),#
rnorm(10, 15, 2), rnorm(10, 12,2.5))#
fac1 <- c(rep("L", 20), rep("M", 20), rep("H", 20))#
fac1 <- factor(fac1, levels = c("L", "M", "H"))#
fac2 <- c(rep("WT", 10), rep("GMO", 10))#
fac2 <- rep(fac2, 3)#
fac2 <- as.factor(fac2)#
num1 <- c(rep(5, 20), rep(10, 20), rep(12, 20))#
td <- data.frame(r = res, f1 = fac1, f2 = fac2, no1 = num1)
ls()
exprs
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
library("plyr")
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
sessionInfo()
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
demo <- rxnNorm(data = td, formula = r ~ f1*f2,#
cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1.2, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")
str(td)
demo <- rxnNorm(data = td, formula = r ~ f1*f2,#
cols = c("red", "blue"), freckles = FALSE, method = "sem",#
table = c(1.2, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") {#
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'mean', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + geom_line(aes(x = 'factor1', y = 'median', group = 'factor2', color = 'factor2'), data = meaMed)#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
    if (!is.null(title)) p <- p + labs(title = title)#
    if (!is.null(xlab)) p <- p + labs(xlab = xlab)#
    if (!is.null(ylab)) p <- p + labs(ylab = ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot() + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	invisible(p)#
	}
tf <-#
function(formula = NULL, data = NULL) {#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot()#
	p <- p + geom_point(data = data, aes_string(x = fac1, y = res, color = fac2, group = fac2))#
	jit <- position_jitter(width = 0.05, height = 0.0)#
	p <- p + geom_jitter(position = jit, size = 1.0) #
	invisible(p)#
	}
tf(data = td, formula = r~f1*f2)
tp <- tf(data = td, formula = r~f1*f2)
tp <- qplot(x = r, y = f1, data = td)
print(tp)
tp <- qplot(x = r, y = f1, data = td)#
jit <- position_jitter(width = 0.05, height = 0.0)#
tp <- tp + geom_jitter(position = jit, size = 1.0) #
print(tp)
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		}#
	invisible(p)#
	}
demo <- rxnNorm(data = td, formula = r ~ f1*f2,#
cols = c("red", "blue"), freckles = TRUE, method = "sem",#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		print(stat_summary(fun.data = "seXy"))#
		}#
	invisible(p)#
	}
?seXy
x <- rnorm(100)
seXy(x)
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.y = "seXy", geom = "pointrange")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy", geom = "pointrange")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	sss <- function(fun, geom = "linerange") {#
	}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy", geom = "linerange")#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	sss <- function(fun, ...) {#
		stat_summary(fun.y = fun, geom = "linerange", ...)#
		}#
	if (method == "sem") {#
		p <- p + sss(seXy)#
		}#
	invisible(p)#
	}
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	sss <- function(fun, ...) {#
		stat_summary(fun.y = fun, geom = "point", ...)#
		}#
	if (method == "sem") {#
		p <- p + sss(mean, color = "red")#
		}#
	invisible(p)#
	}
tp <- qplot(x = r, y = f1, data = td)#
jit <- position_jitter(width = 0.05, height = 0.05)#
tp <- tp + geom_jitter(position = jit, size = 1.0) #
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
jit <- position_jitter(width = 0.05, height = 0.05)#
tp <- tp + geom_jitter(position = jit, size = 1.0) #
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
jit <- position_jitter(width = 0.05, height = 0.05)#
tp <- tp + geom_point(position = jit, size = 1.0) #
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
tp <- tp + geom_point() #
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
tp <- tp + geom_point()#
sss <- function(fun, geom = "point", ...) {#
	stat_summary(fun.y = fun, geom = geom, ...)#
	}#
tp <- tp + sss(mean, color = "red")#
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
tp <- tp + geom_point()#
sss <- function(fun, geom = "point", ...) {#
	stat_summary(fun.y = fun, geom = geom, ...)#
	}#
tp <- tp + sss(mean, color = "red", geom = "line")#
print(tp)
tp <- qplot(x = f1, y = r, data = td)#
tp <- tp + geom_point()#
sss <- function(fun, geom = "point", ...) {#
	stat_summary(fun.y = fun, geom = geom, ...)#
	}#
tp <- tp + sss(seXy, color = "red", geom = "linerange")#
print(tp)
seXy
rxnNorm <-#
function(formula = NULL, data = NULL, cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(formula)) stop("Formula not given")#
	if (!is.formula(formula)) stop("Invalid formula specification")#
	if (!length(formula) == 3) stop("Formula must include both LHS and RHS terms, e.g.: response ~ factor1*factor2")#
	if (!length(all.vars(formula[[3]])) == 2) stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
	if (!formula[[3]][[1]] == "*") stop("Formula must include interaction terms, e.g.: response ~ factor1*factor2")#
#
	res <- as.character(formula[[2]])#
	fac1 <- as.character(formula[[3]][2])#
	fac2 <- as.character(formula[[3]][3])#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
#
	if (!is.factor(data[,fac2])) stop("factor2 was not actually of type factor")#
	p <- ggplot()#
	if (!freckles) {#
		p <- p + geom_point(data = data, #
		aes_string(x = fac1, y = res, color = fac2, group = fac2))#
		}#
#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(data = data,#
		aes_string(x = fac1, y = res, color = fac2, group = fac2),#
		position = jit, size = 1.0)#
		}#
	if (is.null(cols)) cols <- brewer.pal(length(levels(data[,fac2])), "Set1")#
	p <- p  + scale_colour_manual(name = "", values = cols) +#
		theme(axis.text.x = element_text(colour = "black"),#
		axis.text.y = element_text(colour = "black"),#
		axis.ticks = element_blank())		#
	if ((type == "connect") | (type == "anova")) {#
		mea <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
		med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
		meaMed <- cbind(mea, med[,3])#
		names(meaMed) <- c("factor1", "factor2", "mean", "median")#
		}#
	sss <- function(fun, geom = "point", ...) {#
		stat_summary(fun.y = fun, geom = geom, ...)#
		}#
	if (method == "sem") {#
		p <- p + sss(mean, color = "red")#
		}#
	invisible(p)#
	}
demo <- rxnNorm(data = td, formula = r ~ f1*f2,#
cols = c("red", "blue"), freckles = FALSE, method = "sem",#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")
print(demo)
