install.packages("ggplot2")
library("ggplot2")
library("grid")
install.packages("gridExtra")
library("gridExtra")
base + annotation_custom(grob = roundrectGrob(),#
          xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
base <- qplot(1:10, 1:10, geom = "blank") + theme_bw()#
require(gridExtra)#
base + annotation_custom(grob = tableGrob(head(iris[ ,1:3])),#
        xmin = 3, xmax = 6, ymin = 2, ymax = 8)
?annotation_custom
rxnNorm <-#
function(data = NULL, res = NULL,#
	fac1 = NULL, fac2 = NULL, fac2cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(fac2cols)) stop("You need to supply fac2cols")#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot(data, aes_string(x = fac1, y = res, color = fac2,#
		group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") { #
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	p <- p  + scale_colour_manual(name = "", values = fac2cols) +#
		opts(axis.text.x = theme_text(colour = "black"),#
		axis.text.y = theme_text(colour = "black"),#
		axis.ticks = theme_blank()) + opts(...)		#
    if (!is.null(title)) p <- p + opts(title = title)#
    if (!is.null(xlab)) p <- p + xlab(xlab)#
    if (!is.null(ylab)) p <- p + ylab(ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
			p <- p + annotate("table", table[1], table[2], table = mod,#
				theme = theme.list(show.box = TRUE, separator = "black",#
				gp = gpar(cex = table[3]),#
               	show.csep = TRUE, show.rsep = TRUE, show.colnames = TRUE,#
               	show.rownames = TRUE,#
               	gpar.rowtext = gpar(col = "black", cex = 1.0, fontface = "bold")))#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			p <- p + annotate("table", table[1], table[2], table = mod.res,#
				theme = theme.list(show.box = TRUE, separator = "black",#
				gp = gpar(cex = table[3]),#
               	show.csep = TRUE, show.rsep = TRUE, show.colnames = TRUE,#
               	show.rownames = FALSE))#
			}#
		}	#
	invisible(p)#
	}
res = c(rnorm(10, 5, 1.5), rnorm(10, 8, 2),#
rnorm(10, 14, 2.0), rnorm(10, 10, 1.5),#
rnorm(10, 15, 2), rnorm(10, 12,2.5))#
fac1 <- c(rep("L", 20), rep("M", 20), rep("H", 20))#
fac1 <- factor(fac1, levels = c("L", "M", "H"))#
fac2 <- c(rep("WT", 10), rep("GMO", 10))#
fac2 <- rep(fac2, 3)#
fac2 <- as.factor(fac2)#
num1 <- c(rep(5, 20), rep(10, 20), rep(12, 20))#
td <- data.frame(r = res, f1 = fac1, f2 = fac2, no1 = num1)
findFn("count")
library("plyr")
library("ChemoSpec")
rxnNorm <-#
function(data = NULL, res = NULL,#
	fac1 = NULL, fac2 = NULL, fac2cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(fac2cols)) stop("You need to supply fac2cols")#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot(data, aes_string(x = fac1, y = res, color = fac2,#
		group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") { #
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	p <- p  + scale_colour_manual(name = "", values = fac2cols) +#
		opts(axis.text.x = theme_text(colour = "black"),#
		axis.text.y = theme_text(colour = "black"),#
		axis.ticks = theme_blank()) + opts(...)		#
    if (!is.null(title)) p <- p + opts(title = title)#
    if (!is.null(xlab)) p <- p + xlab(xlab)#
    if (!is.null(ylab)) p <- p + ylab(ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
		}	#
	invisible(p)#
	}
g <- ggplotGrob(qplot(1, 1) +#
  opts(plot.background = theme_rect(col = "black")))#
base +#
  annotation_custom(grob = g, xmin = 1, xmax = 10, ymin = 8, ymax = 10)
?tableGrob
grid.table(head(iris), h.even.alpha=1, h.odd.alpha=1,  v.even.alpha=0.5, v.odd.alpha=1)#
grid.newpage()#
grid.draw(tableGrob(head(iris, 10), name="test"))
rxnNorm <-#
function(data = NULL, res = NULL,#
	fac1 = NULL, fac2 = NULL, fac2cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(fac2cols)) stop("You need to supply fac2cols")#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot(data, aes_string(x = fac1, y = res, color = fac2,#
		group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") { #
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	p <- p  + scale_colour_manual(name = "", values = fac2cols) +#
		opts(axis.text.x = theme_text(colour = "black"),#
		axis.text.y = theme_text(colour = "black"),#
		axis.ticks = theme_blank()) + opts(...)		#
    if (!is.null(title)) p <- p + opts(title = title)#
    if (!is.null(xlab)) p <- p + xlab(xlab)#
    if (!is.null(ylab)) p <- p + ylab(ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[5]))#
#
			p <- p + annotation_custom(myt, xmin = table[1], xmax = table[2],#
				ymin = table[3], ymax = table[4])#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
		}	#
	invisible(p)#
	}
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1, 3, 1, 5, 1.5),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1, 3, 1, 5, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1, 3, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(-1, 3, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(-1, 1, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(-1, 0, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1, 1, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0.5, 1, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0.5, 0.75, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0.5, 0, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0.5, 2, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 2, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 3, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 1, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 5, 5, 10, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 1, 2, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 5, 2, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(0, 5, 5, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(2, 3, 5, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(2.4, 2.6, 5, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
rxnNorm <-#
function(data = NULL, res = NULL,#
	fac1 = NULL, fac2 = NULL, fac2cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(fac2cols)) stop("You need to supply fac2cols")#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot(data, aes_string(x = fac1, y = res, color = fac2,#
		group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") { #
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	p <- p  + scale_colour_manual(name = "", values = fac2cols) +#
		opts(axis.text.x = theme_text(colour = "black"),#
		axis.text.y = theme_text(colour = "black"),#
		axis.ticks = theme_blank()) + opts(...)		#
    if (!is.null(title)) p <- p + opts(title = title)#
    if (!is.null(xlab)) p <- p + xlab(xlab)#
    if (!is.null(ylab)) p <- p + ylab(ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt)#
			}#
		}	#
	invisible(p)#
	}
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1.5, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(2.5, 6, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(2.5, 6, 1),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
rxnNorm <-#
function(data = NULL, res = NULL,#
	fac1 = NULL, fac2 = NULL, fac2cols = NULL,#
	freckles = FALSE, type = "connect",#
	method = c("sem", "iqr", "mad", "box", "sem95"),#
	table = NULL, xlab = NULL, ylab = NULL, title = NULL, ...) {#
	if (is.null(fac2cols)) stop("You need to supply fac2cols")#
	keep <- c(res, fac1, fac2)#
	data <- data[, keep]#
	data <- na.omit(data)#
	p <- ggplot(data, aes_string(x = fac1, y = res, color = fac2,#
		group = fac2))#
	if (freckles) {#
		jit <- position_jitter(width = 0.05, height = 0.0)#
		p <- p + geom_jitter(position = jit, size = 1.0) #
		}#
	if (method == "box") { #
		p <- p + geom_boxplot(width = 0.2)#
		if (type == "connect") {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "sem") {#
		p <- p + stat_summary(fun.data = "seXy")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "sem95") {#
		p <- p + stat_summary(fun.data = "seXy95")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "mean", geom = "line")#
				}#
		}#
	if (method == "mad") {#
		p <- p + stat_summary(fun.data = "seXyMad")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (method == "iqr") {#
		p <- p + stat_summary(fun.data = "seXyIqr")#
		if ((type == "connect") | (type == "anova")) {#
			p <- p + stat_summary(fun.y = "median", geom = "line")#
				}#
		}#
	if (type == "fitLine") {#
		p <- p + geom_smooth(method = "lm", se = FALSE)#
		}#
	p <- p  + scale_colour_manual(name = "", values = fac2cols) +#
		opts(axis.text.x = theme_text(colour = "black"),#
		axis.text.y = theme_text(colour = "black"),#
		axis.ticks = theme_blank()) + opts(...)		#
    if (!is.null(title)) p <- p + opts(title = title)#
    if (!is.null(xlab)) p <- p + xlab(xlab)#
    if (!is.null(ylab)) p <- p + ylab(ylab)#
	if (!is.null(table)) {#
		if (type == "connect") {#
			counts <- count(data, vars = c(fac2, fac1))#
			colnames(counts) <- c(fac2, fac1, "count")#
#
			myt <- tableGrob(counts, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "anova") {#
			if (!is.null(fac2)) form <- as.formula(paste(res, "~", paste(fac1, fac2, sep = "*")))#
			if (is.null(fac2)) form <- as.formula(paste(res, "~", fac1, sep = ""))#
			mod <- aov(formula = form, data = data)#
			mod <- summary(mod)[[1]]#
			mod[,2:4] <- round(mod[,2:4], 2)#
			mod[,5] <- signif(mod[,5], 4)#
#
			myt <- tableGrob(mod, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
#
		if (type == "fitLine") {#
			lvls <- levels(data[,fac2])#
			nl <- length(lvls)#
			m <- c()#
			b <- c()#
			r2 <- c()#
			for (i in 1:nl) {#
				dat <- subset(data, data[,fac2] == lvls[i])#
				mod <- lm(dat[,res] ~ dat[,fac1])#
				m[i] <- round(mod$coef[2], 2)#
				b [i]<- round(mod$coef[1], 2)#
				r2[i] <- round(cor(dat[,fac1], dat[,res])^2, 4)#
				}#
			mod.res <- data.frame(line = lvls, m = m, b = b, r2 = r2)#
			myt <- tableGrob(mod.res, show.box = TRUE,#
				show.rownames = FALSE, show.colnames = TRUE,#
				show.csep = TRUE, show.rsep = TRUE,#
				separator = "black", gp = gpar(cex = table[3]))#
#
			p <- p + annotation_custom(myt, xmin = table[1]-0.5, xmax = table[1]+0.5,#
				ymin = table[2]-0.5, ymax = table[2]+0.5)#
			}#
		}	#
	invisible(p)#
	}
demo <- rxnNorm(data = td, res = "r", fac1 = "no1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(7, 15, 0.75),#
title = "rxnNorm Demo: x axis numeric with lm",#
type = "fitLine")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(1.2, 15, 0.75),#
title = "rxnNorm Demo: x axis categorical with table of counts",#
type = "connect")#
print(demo)
demo <- rxnNorm(data = td, res = "r", fac1 = "f1", fac2 = "f2",#
fac2cols = c("red", "blue"), freckles = TRUE, method = "sem",#
table = c(2, 22, 0.75),#
title = "rxnNorm Demo: x axis categorical with ANOVA table",#
type = "anova") + ylim(0, 25)#
print(demo)
library("HandyStuff")
spec <- data.frame(mu = c(3.5, 3.4, 3.3, 3.2, 1.4, 1.3, 1.2),#
sd = rep(0.01, 7), tail =  rep(NA, 7),#
area = c(1, 3, 3, 1, 1, 2, 1) * c(0.5, 0.5, 0.5, 0.5, 0.66, 0.66, 0.66))#
ex2 <- makeSpec(spec, x.range = c(5, 0), plot = TRUE, curves = FALSE, dd = 100)
