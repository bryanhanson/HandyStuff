compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- cols[data[,fac1]]#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- cols[data[,fac1]]#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	print(data)#
	print(data[,fac2])#
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- cols[data[,fac1]]#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
library("plyr")
arrange(mydf, cat1)
arrange(mydf, mydf[,cat1])
arrange(mydf, cat2)
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		print(split(data, fac2))#
		cols2 <- cols[data[,fac1]] #
#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		str(data)#
		print(split(data, fac2))#
		cols2 <- cols[data[,fac1]] #
#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
?split
n <- 10; nn <- 100#
g <- factor(round(n * runif(n * nn)))#
x <- rnorm(n * nn) + sqrt(as.numeric(g))#
xg <- split(x, g)
xg
sapply(xg, mean)
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		str(data)#
		print(split(data, data$fac2))#
		cols2 <- cols[data[,fac1]] #
#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
split(mydf, cat2)
split(mydf, "cat2")
split(mydf)
split(mydf, mydf$cat2)
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		str(data)#
		print(split(data, data[,fac2]))#
		cols2 <- cols[data[,fac1]] #
#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		L <- split(data, data[,fac2])#
		print(L)#
		cols2 <- cols[data[,fac1]] #
#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
?lappy
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		lf <- function(data, fac, colors) return(colors[data[,fac]])#
		L <- split(data, data[,fac2])#
		cols2 <- sapply(L, lf, fac2, cols)#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		lf <- function(data, fac, colors) return(colors[data[,fac]])#
		L <- split(data, data[,fac2])#
		cols2 <- sapply(L, lf, fac1, cols)#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
?lapply
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		lf <- function(data, fac, colors) return(colors[data[,fac]])#
		L <- split(data, data[,fac2])#
		cols2 <- lapply(L, lf, fac1, cols)#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		lf <- function(data, fac, colors) return(colors[data[,fac]])#
		L <- split(data, data[,fac2])#
		cols2 <- unlist(lapply(L, lf, fac1, cols))#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
library("lattice")
?panel.xy
?panel.xyplot
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- c(cols, cols)[data[,fac1]]#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
p <- compareCats(formula = resp~cat1, data = mydf,#
method = "sem", freckles = TRUE, poster = FALSE, #
cols = c("red", "orange", "blue"))#
print(p)
str(paste(mydf$cat1, mydf$cat2, sep = ""))
str(as.factor(paste(mydf$cat1, mydf$cat2, sep = "")))
str(as.factor(paste(mydf$cat2, mydf$cat1, sep = "")))
levels(as.factor(paste(mydf$cat2, mydf$cat1, sep = "")))
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		newf <- as.factor(paste(mydf$cat2, mydf$cat1, sep = ""))#
		cols2 <- c(cols, cols)[newf]#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		newf <- as.factor(paste(mydf$cat2, mydf$cat1, sep = ""))#
		cols2 <- cols[newf]#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		newf <- as.factor(paste(mydf$cat2, mydf$cat1, sep = ""))#
		print(newf)#
		cols2 <- cols[newf]#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
levels(cat1)
ls()
mydf
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- rep(NA_character_, nrow(data))#
		for (i in 1:nlevels(fac1)) {#
			tmp <- which(data[,fac1] == levels(fac1)[i])#
			cols2[tmp] <- cols[i]#
			}#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- rep(NA_character_, nrow(data))#
		for (i in 1:nlevels(fac1)) {#
			tmp <- which(data[,fac1] == levels(fac1)[i])#
			print(tmp)#
			cols2[tmp] <- cols[i]#
			}#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
levels(mydf$cat1)
levels(mydf$cat1)[1]
which(mydf$cat1 == "A")
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- rep(NA_character_, nrow(data))#
		for (i in 1:nlevels(data[,fac1])) {#
			tmp <- which(data[,fac1] == levels(data[,fac1])[i])#
			print(tmp)#
			cols2[tmp] <- cols[i]#
			}#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols2, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- rep(NA_character_, nrow(data))#
		for (i in 1:nlevels(data[,fac1])) {#
			tmp <- which(data[,fac1] == levels(data[,fac1])[i])#
			cols2[tmp] <- cols[i]#
			}#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols2...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = c(cols, cols), ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
compareCats <-#
function(formula = NULL, data = NULL,#
	cols = NULL, freckles = FALSE,#
	method = c("sem", "sem95", "iqr", "mad", "box", "points"),#
	poster = FALSE, ...)#
	{#
	if (is.null(formula)) stop("Formula not given")#
	if (!plyr::is.formula(formula)) stop("Invalid formula specification")#
#
	TwoFac <- FALSE#
	res <- as.character(formula[[2]])#
	if (length(formula[[3]]) == 1) {#
		fac1 <- as.character(formula[[3]])#
		}#
	if (length(formula[[3]]) == 3) {#
		fac2 <- as.character(formula[[3]][3])#
		fac1 <- as.character(formula[[3]][2])#
		TwoFac <- TRUE#
		}#
#
	args <- as.list(match.call(expand.dots = FALSE)[-1]) #
	if (TwoFac) keep <- c(res, fac1, fac2)#
	if (!TwoFac) keep <- c(res, fac1)#
	data <- data[, keep]#
	data <- na.omit(data)#
	if (TwoFac)	data <- plyr::arrange(data, data[,fac2]) #
	if (!is.factor(data[,fac1])) stop(paste(fac1, "was not of type factor"))#
	if (TwoFac) if (!is.factor(data[,fac2])) stop(paste(fac2, "was not of type factor"))#
#
	if ((freckles) & (method == "points")) {#
		freckles <- FALSE#
		message("Points & freckles don't make sense together, only plotting points")#
		}#
#
	if ((freckles) & (method == "box")) {#
		freckles <- FALSE#
		message("Box plot & freckles don't look good together, only plotting boxplot")#
		}#
	yl <- c(min(data[,res]) - 0.15*diff(range(data[,res])), max(data[,res])*1.05)#
	nc <- length(levels(data[,fac1]))#
	if (is.null(cols)) {#
		cols <- RColorBrewer::brewer.pal(nc, "Set1")#
		if (nc == 2) cols <- cols[1:2]#
		}#
	if (!is.null(cols)) {#
		if (nc != length(cols)) {#
			stop(paste("You gave", length(cols), "colors, but you need", nc, "colors"))#
			}#
		}#
	if (!TwoFac) cols2 <- cols[data[,fac1]]#
	if (TwoFac) {#
		cols2 <- rep(NA_character_, nrow(data))#
		for (i in 1:nlevels(data[,fac1])) {#
			tmp <- which(data[,fac1] == levels(data[,fac1])[i])#
			cols2[tmp] <- cols[i]#
			}#
		print(cols2)#
		}#
	if (poster) ps = posterTheme()#
	if (!poster) ps = screenTheme()#
	if (!TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = fac1)#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-2]#
			names(facCounts) <- c("x", "lab", "y")#
			lattice::panel.text(x = facCounts[,1], y = facCounts[,3], labels = facCounts[,2], ...)#
			} #
		panel.summary <- function(x, y, ...) {#
			meany <- aggregate(data[,res] ~ data[,fac1], data, FUN = mean)#
			medy <- aggregate(data[,res] ~ data[,fac1], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(meany, medy[,2], sexy[[2]][,c(2,3)], sexy95[[2]][,c(2,3)],#
				sexymad[[2]][,c(2,3)], sexyiqr[[2]][,c(2,3)])#
			names(sumDat) <- c("factor1", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")			#
			if ((method == "sem") | (method == "sem95")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,2], ...)#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				lattice::panel.points(x = sumDat[,1], y = sumDat[,3], ...)#
				}#
			if (method == "sem") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,4],#
				x1 = sumDat[,1], y1 = sumDat[,5], lwd = 3, ...)		#
				}#
#
			if (method == "sem95") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,6],#
				x1 = sumDat[,1], y1 = sumDat[,7], lwd = 3, ...)		#
				}#
#
			if (method == "mad") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,8],#
				x1 = sumDat[,1], y1 = sumDat[,9], lwd = 3, ...)		#
				}#
#
			if (method == "iqr") {#
				lattice::panel.segments(x0 = sumDat[,1], y0 = sumDat[,10],#
				x1 = sumDat[,1], y1 = sumDat[,11], lwd = 3, ...)		#
				}#
			} #
		} #
	if (TwoFac) { #
		panel.counts <- function(x, y, ...) {#
			facCounts <- plyr::count(data, vars = c(fac1, fac2))#
			facCounts$label <- paste("n = ", facCounts$freq , sep = "")#
			facCounts$y <- min(data[,res]) - 0.1*diff(range(data[,res]))#
			facCounts <- facCounts[,-3]#
			names(facCounts) <- c("f1", "f2", "lab", "y")#
			f1 <- f2 <- NULL #
			facCounts <- plyr::arrange(facCounts, f2, f1)#
			lf1 <- length(levels(facCounts$f1)) #
			lf2 <- length(levels(facCounts$f2)) #
			xx <- function(pn) {#
				nr <- nrow(facCounts) #
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			for (i in seq_along(lf2)) {#
					xxx <- xx(lattice::packet.number())#
					lattice::panel.text(x = 1:lf1, y = facCounts[xxx, 4],#
						labels = facCounts[xxx, 3], ...)			#
				}#
			} #
		panel.summary <- function(x, y, ...) {#
			mean <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = mean)#
			med <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = median)#
			sexy <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy)#
			sexy95 <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXy95)#
			sexymad <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyMad)#
			sexyiqr <- aggregate(data[,res] ~ data[,fac1]*data[, fac2], data, FUN = ChemoSpec::seXyIqr)#
			sumDat <- cbind(mean, med[,3], sexy[[3]][,c(2,3)], sexy95[[3]][,c(2,3)],#
				sexymad[[3]][,c(2,3)], sexyiqr[[3]][,c(2,3)])#
			names(sumDat) <- c("factor1", "factor2", "mean", "median",#
				"semL", "semU", "sem95L", "sem95U", "madL", "madU",#
				"iqrL", "iqrU")#
			lf1 <- length(levels(sumDat$factor1)) #
			lf2 <- length(levels(sumDat$factor2)) #
			xx <- function(pn) {#
				nr <- nrow(sumDat)#
				st <- 1 + (lattice::packet.number()-1)*lf1#
				end <- st + lf1 - 1#
				myx <- 1:nr#
				myx <- myx[st:end]#
				myx	#
				}#
			if ((method == "sem") | (method == "sem95")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 3], ...)#
					}#
				}#
			if ((method == "mad") | (method == "iqr")) {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.points(x = 1:lf1, y = sumDat[xxx, 4], ...)#
					}#
				}#
			if (method == "sem") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,5],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,6], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "sem95") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,7],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,8], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "mad") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,9],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,10], lwd = 3, ...)		#
					}#
				}#
#
			if (method == "iqr") {#
				for (i in seq_along(lf2)) {#
						xxx <- xx(lattice::packet.number())#
						lattice::panel.segments(x0 = sumDat[xxx,1], y0 = sumDat[xxx,11],#
						x1 = sumDat[xxx,1], y1 = sumDat[xxx,12], lwd = 3, ...)		#
					}#
				}#
			} #
		} #
	if (!method == "box") {#
		p <- lattice::xyplot(as.formula(args$formula),#
  		data = eval(args$data), ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				if (method == "points") lattice::panel.xyplot(x, y, col = cols2...) #
				if (freckles) lattice::panel.xyplot(x, y, jitter.x = TRUE, col = cols, ...)#
				panel.summary(x, y, col = cols, ...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
	if (method == "box") { #
		p <- lattice::bwplot(formula, data, ylim = yl, ...,#
			scales = list(alternating = FALSE),#
			between = list(x = 0.25, y = 0.25),#
			axis = latticeExtra::axis.grid,#
			par.settings = ps,#
			panel = function(x, y, ...) {#
				lattice::trellis.par.set(box.umbrella = list(col = cols)) #
				lattice::panel.bwplot(x, y, box.width = 0.1, fill = cols,...)#
				panel.counts(x, y, ...)#
				}#
				)#
		}#
#
		return(p) #
 	}
p <- compareCats(formula = resp~cat1 | cat2, data = mydf,#
method = "sem", freckles = TRUE, poster = FALSE,#
cols = c("red", "orange", "blue"))#
print(p)
